{"ast":null,"code":"import _createClass from \"/Users/apple/Desktop/LMGame/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/apple/Desktop/LMGame/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Inject, Injectable, Optional, PLATFORM_ID, NgModule, defineInjectable, inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\n\nimport * as ɵngcc0 from '@angular/core';\nvar\n/** @type {?} */\nhasV8BreakIterator = typeof Intl !== 'undefined' &&\n/** @type {?} */\nIntl.v8BreakIterator;\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n\nvar Platform = /*#__PURE__*/_createClass(\n/**\n * \\@breaking-change v7.0.0 remove optional decorator\n * @param {?=} _platformId\n */\nfunction Platform(_platformId) {\n  _classCallCheck(this, Platform);\n\n  this._platformId = _platformId;\n  /**\n   * Whether the Angular application is being rendered in the browser.\n   * We want to use the Angular platform check because if the Document is shimmed\n   * without the navigator, the following checks will fail. This is preferred because\n   * sometimes the Document may be shimmed without the user's knowledge or intention\n   */\n\n  this.isBrowser = this._platformId ? isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n  /**\n   * Whether the current browser is Microsoft Edge.\n   */\n\n  this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n  /**\n   * Whether the current rendering engine is Microsoft Trident.\n   */\n\n  this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n  /**\n   * Whether the current rendering engine is Blink.\n   */\n\n  this.BLINK = this.isBrowser && !!(\n  /** @type {?} */\n  window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT;\n  /**\n   * Whether the current rendering engine is WebKit.\n   */\n\n  this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n  /**\n   * Whether the current platform is Apple iOS.\n   */\n\n  this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !\n  /** @type {?} */\n  window.MSStream;\n  /**\n   * Whether the current browser is Firefox.\n   */\n\n  this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n  /**\n   * Whether the current platform is Android.\n   */\n\n  this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n  /**\n   * Whether the current browser is Safari.\n   */\n\n  this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n});\n\nPlatform.ɵfac = function Platform_Factory(t) {\n  return new (t || Platform)(ɵngcc0.ɵɵinject(PLATFORM_ID, 8));\n};\n\nPlatform.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: Platform,\n  factory: Platform.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nPlatform.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function Platform_Factory() {\n    return new Platform(inject(PLATFORM_ID, 8));\n  },\n  token: Platform,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Cached result of whether the user's browser supports passive event listeners.\n */\n\n\nvar\n/** @type {?} */\nsupportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n * @return {?}\n */\n\nfunction supportsPassiveEventListeners() {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test',\n      /** @type {?} */\n      null, Object.defineProperty({}, 'passive', {\n        get: function get() {\n          return supportsPassiveEvents = true;\n        }\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n/**\n * Check whether the browser supports scroll behaviors.\n * @return {?}\n */\n\n\nfunction supportsScrollBehavior() {\n  return !!(document && document.documentElement && document.documentElement.style && 'scrollBehavior' in document.documentElement.style);\n}\n/**\n * Cached result Set of input types support by the current browser.\n */\n\n\nvar\n/** @type {?} */\nsupportedInputTypes;\n/**\n * Types of `<input>` that *might* be supported.\n */\n\nvar\n/** @type {?} */\ncandidateInputTypes = ['color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];\n/**\n * @return {?} The input types supported by this browser.\n */\n\nfunction getSupportedInputTypes() {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  } // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n\n\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  var\n  /** @type {?} */\n  featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(function (value) {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n  return supportedInputTypes;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar PlatformModule = /*#__PURE__*/(function () {\n  var PlatformModule = /*#__PURE__*/_createClass(function PlatformModule() {\n    _classCallCheck(this, PlatformModule);\n  });\n\n  PlatformModule.ɵfac = function PlatformModule_Factory(t) {\n    return new (t || PlatformModule)();\n  };\n\n  PlatformModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PlatformModule\n  });\n  PlatformModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return PlatformModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { Platform, supportsPassiveEventListeners, supportsScrollBehavior, getSupportedInputTypes, PlatformModule }; //# sourceMappingURL=platform.js.map","map":null,"metadata":{},"sourceType":"module"}