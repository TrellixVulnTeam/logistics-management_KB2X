{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Desktop/LMGame/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Desktop/LMGame/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { LoginDetailsService } from '../services/login-details.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/login-details.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/toolbar\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/button\";\nvar _c0 = [\"lform\"];\n\nfunction LandingComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.formErrors.email);\n  }\n}\n\nfunction LandingComponent_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.formErrors.password);\n  }\n}\n\nexport var LandingComponent = /*#__PURE__*/(function () {\n  var LandingComponent = /*#__PURE__*/function () {\n    function LandingComponent(loginDetailsService, router, fb, baseURL) {\n      _classCallCheck(this, LandingComponent);\n\n      this.loginDetailsService = loginDetailsService;\n      this.router = router;\n      this.fb = fb;\n      this.baseURL = baseURL;\n      this.userDetail = {\n        id: 0,\n        email: '',\n        password: '',\n        subscription: '',\n        professor: '',\n        isActive: false\n      };\n      this.profDetail = {\n        id: 0,\n        email: '',\n        password: '',\n        name: '',\n        subscription: ''\n      };\n      this.adminDetail = {\n        id: 0,\n        email: '',\n        password: '',\n        name: ''\n      };\n      this.userFound = false;\n      this.profFound = false;\n      this.adminFound = false;\n      this.formErrors = {\n        'email': '',\n        'password': ''\n      };\n      this.validationMessages = {\n        'email': {\n          'required': 'Email is required.',\n          'email': 'Email not in valid format.'\n        },\n        'password': {\n          'required': 'Password is required.',\n          'minlength': 'Password must be at least 8 characters long.',\n          'maxlength': 'Password cannot be more than 25 characters long.'\n        }\n      };\n      this.createForm();\n    }\n\n    _createClass(LandingComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.getRecordsfromDatabase();\n      }\n    }, {\n      key: \"getRecordsfromDatabase\",\n      value: function getRecordsfromDatabase() {\n        var _this = this;\n\n        console.log('Check', this.loginDetailsService.getLoginDetailsf());\n        this.loginDetailsService.getLoginDetailsf().subscribe(function (loginDetails) {\n          _this.USERS = loginDetails.map(function (data) {\n            console.log(data.payload.doc.id);\n            console.log(data.payload.doc.data());\n            return Object.assign({\n              id: data.payload.doc.id\n            }, data.payload.doc.data());\n          });\n        });\n        this.loginDetailsService.getProfLoginDetails().subscribe(function (loginDetails) {\n          _this.PROFS = loginDetails.map(function (data) {\n            return Object.assign({\n              id: data.payload.doc.id\n            }, data.payload.doc.data());\n          });\n        });\n        this.loginDetailsService.getAdminLoginDetailsf().subscribe(function (loginDetails) {\n          _this.ADMINS = loginDetails.map(function (data) {\n            return Object.assign({\n              email: data.payload.doc.id\n            }, data.payload.doc.data());\n          });\n        });\n      }\n    }, {\n      key: \"createForm\",\n      value: function createForm() {\n        var _this2 = this;\n\n        this.loginForm = this.fb.group({\n          email: ['', [Validators.required, Validators.email]],\n          password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(25)]]\n        });\n        this.loginForm.valueChanges.subscribe(function (data) {\n          return _this2.onValueChanged(data);\n        });\n        this.onValueChanged();\n      }\n    }, {\n      key: \"onValueChanged\",\n      value: function onValueChanged(data) {\n        if (!this.loginForm) {\n          return;\n        }\n\n        var form = this.loginForm;\n\n        for (var field in this.formErrors) {\n          if (this.formErrors.hasOwnProperty(field)) {\n            this.formErrors[field] = '';\n            var control = form.get(field);\n\n            if (control && control.dirty && !control.valid) {\n              var messages = this.validationMessages[field];\n\n              for (var key in control.errors) {\n                if (control.errors.hasOwnProperty(key)) {\n                  this.formErrors[field] += messages[key] + '';\n                }\n              }\n            }\n          }\n        }\n      }\n    }, {\n      key: \"onLoginSubmit\",\n      value: function onLoginSubmit() {\n        this.userDetail = this.loginForm.value; // Check for student users login\n\n        for (var i = 0; i < this.USERS.length; i++) {\n          if (this.USERS[i].email == this.userDetail.email) {\n            if (this.USERS[i].isActive == false) {\n              alert(\"Subscription Expired\");\n            } else {\n              if (this.USERS[i].password == this.userDetail.password) {\n                this.userFound = true;\n                this.userDetail.id = this.USERS[i].id;\n                this.userDetail.email = this.USERS[i].email;\n                this.userDetail.professor = this.USERS[i].professor;\n                this.userDetail.subscription = this.USERS[i].subscription;\n                this.userDetail.isActive = this.USERS[i].isActive;\n              }\n            }\n          }\n        } // Check for professor login \n\n\n        this.profDetail = this.loginForm.value;\n        console.log(this.profDetail);\n\n        for (var i = 0; i < this.PROFS.length; i++) {\n          if (this.PROFS[i].email == this.profDetail.email) {\n            if (this.PROFS[i].password == this.profDetail.password) {\n              this.profFound = true;\n              this.profDetail.name = this.PROFS[i].name;\n              this.profDetail.id = this.PROFS[i].id;\n            }\n          }\n        } // Check for admin login \n\n\n        this.adminDetail = this.loginForm.value;\n\n        for (var i = 0; i < this.ADMINS.length; i++) {\n          if (this.ADMINS[i].email == this.adminDetail.email) {\n            if (this.ADMINS[i].password == this.adminDetail.password) {\n              this.adminFound = true;\n              this.adminDetail.name = this.ADMINS[i].name;\n            }\n          }\n        }\n\n        if (this.adminFound == true) {\n          this.router.navigate(['/admin/home']);\n        }\n\n        if (this.profFound == true) {\n          console.log(this.profDetail.id);\n          localStorage.setItem('id', String(this.profDetail.id));\n          this.router.navigate(['/prof/home', this.profDetail.id]);\n        }\n\n        if (this.userFound == true) {\n          console.log('Prof in Login', this.userDetail.professor);\n          console.log(this.userDetail);\n          localStorage.setItem('profId', this.userDetail.professor);\n          localStorage.setItem('subId', this.userDetail.subscription);\n          this.router.navigate(['/user/home', this.userDetail.id]);\n        }\n\n        if (this.userFound == false && this.profFound == false && this.adminFound == false) {\n          alert(\"No login credentials found!\");\n        }\n\n        this.loginForm.reset({\n          email: '',\n          password: ''\n        });\n        this.loginFormDirective.resetForm();\n      }\n    }]);\n\n    return LandingComponent;\n  }();\n\n  LandingComponent.ɵfac = function LandingComponent_Factory(t) {\n    return new (t || LandingComponent)(i0.ɵɵdirectiveInject(i1.LoginDetailsService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject('BaseURL'));\n  };\n\n  LandingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LandingComponent,\n    selectors: [[\"app-landing\"]],\n    viewQuery: function LandingComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loginFormDirective = _t.first);\n      }\n    },\n    decls: 15,\n    vars: 3,\n    consts: [[\"color\", \"primary\"], [1, \"container\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [\"lform\", \"ngForm\"], [\"matInput\", \"\", \"formControlName\", \"email\", \"placeholder\", \"Registered Email-ID\", \"type\", \"text\", \"required\", \"\"], [4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"Password\", \"type\", \"password\", \"formControlName\", \"password\", \"required\", \"\"], [\"type\", \"submit\", \"mat-button\", \"\", 1, \"background-primary\", \"text-floral-white\"]],\n    template: function LandingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-toolbar\", 0);\n        i0.ɵɵtext(1, \" Login \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"form\", 2, 3);\n        i0.ɵɵlistener(\"ngSubmit\", function LandingComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onLoginSubmit();\n        });\n        i0.ɵɵelementStart(5, \"p\");\n        i0.ɵɵelementStart(6, \"mat-form-field\");\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵtemplate(8, LandingComponent_mat_error_8_Template, 2, 1, \"mat-error\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵelementStart(10, \"mat-form-field\");\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵtemplate(12, LandingComponent_mat_error_12_Template, 2, 1, \"mat-error\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 7);\n        i0.ɵɵtext(14, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.formErrors.email);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.formErrors.password);\n      }\n    },\n    directives: [i4.MatToolbar, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i5.MatFormField, i6.MatInput, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i3.RequiredValidator, i7.NgIf, i8.MatButton, i5.MatError],\n    styles: [\"\"]\n  });\n  return LandingComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}