{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Desktop/LMGame/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Desktop/LMGame/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { LoginDetailsService } from '../services/login-details.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/login-details.service\";\nimport * as i4 from \"@angular/material/toolbar\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/button\";\nvar _c0 = [\"lform\"];\n\nfunction AdminLoginComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.formErrors.username);\n  }\n}\n\nfunction AdminLoginComponent_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.formErrors.password);\n  }\n}\n\nexport var AdminLoginComponent = /*#__PURE__*/(function () {\n  var AdminLoginComponent = /*#__PURE__*/function () {\n    function AdminLoginComponent(fb, router, loginDetailsService) {\n      _classCallCheck(this, AdminLoginComponent);\n\n      this.fb = fb;\n      this.router = router;\n      this.loginDetailsService = loginDetailsService;\n      this.adminDetail = {\n        id: 0,\n        email: '',\n        password: '',\n        name: ''\n      };\n      this.adminFound = false;\n      this.formErrors = {\n        'username': '',\n        'password': ''\n      };\n      this.validationMessages = {\n        'username': {\n          'required': 'Username is required.',\n          'minlength': 'Username must be at least 3 characters long.',\n          'maxlength': 'Username cannot be more than 25 characters long.'\n        },\n        'password': {\n          'required': 'Password is required.',\n          'minlength': 'Password must be at least 3 characters long.',\n          'maxlength': 'Password cannot be more than 25 characters long.'\n        }\n      };\n      this.createForm();\n    }\n\n    _createClass(AdminLoginComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.getRecordsfromDatabase();\n      }\n      /**\n      * @desc Getting Admin login records form the database\n      **/\n\n    }, {\n      key: \"getRecordsfromDatabase\",\n      value: function getRecordsfromDatabase() {\n        var _this = this;\n\n        this.loginDetailsService.getAdminLoginDetailsf().subscribe(function (loginDetails) {\n          _this.ADMINS = loginDetails.map(function (data) {\n            return Object.assign({\n              email: data.payload.doc.id\n            }, data.payload.doc.data());\n          });\n        });\n      }\n    }, {\n      key: \"createForm\",\n      value: function createForm() {\n        var _this2 = this;\n\n        this.AdminLoginForm = this.fb.group({\n          email: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(25)]],\n          password: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(25)]]\n        });\n        this.AdminLoginForm.valueChanges.subscribe(function (data) {\n          return _this2.onValueChanged(data);\n        });\n        this.onValueChanged();\n      }\n    }, {\n      key: \"onValueChanged\",\n      value: function onValueChanged(data) {\n        if (!this.AdminLoginForm) {\n          return;\n        }\n\n        var form = this.AdminLoginForm;\n\n        for (var field in this.formErrors) {\n          if (this.formErrors.hasOwnProperty(field)) {\n            this.formErrors[field] = '';\n            var control = form.get(field);\n\n            if (control && control.dirty && !control.valid) {\n              var messages = this.validationMessages[field];\n\n              for (var key in control.errors) {\n                if (control.errors.hasOwnProperty(key)) {\n                  this.formErrors[field] += messages[key] + '';\n                }\n              }\n            }\n          }\n        }\n      }\n      /**\n      * @desc Checking username and password in stored records\n      **/\n\n    }, {\n      key: \"onLoginSubmit\",\n      value: function onLoginSubmit() {\n        this.adminDetail = this.AdminLoginForm.value;\n\n        for (var i = 0; i < this.ADMINS.length; i++) {\n          if (this.ADMINS[i].email == this.adminDetail.email) {\n            if (this.ADMINS[i].password == this.adminDetail.password) {\n              this.adminFound = true;\n              this.adminDetail.name = this.ADMINS[i].name;\n            }\n          }\n        }\n\n        if (this.adminFound == true) {\n          this.router.navigate(['/admin/home']);\n        } else {\n          alert(\"Enter valid username and password!\");\n        }\n\n        this.AdminLoginForm.reset({\n          email: '',\n          password: ''\n        });\n        this.AdminLoginFormDirective.resetForm();\n      }\n    }]);\n\n    return AdminLoginComponent;\n  }();\n\n  AdminLoginComponent.ɵfac = function AdminLoginComponent_Factory(t) {\n    return new (t || AdminLoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.LoginDetailsService));\n  };\n\n  AdminLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AdminLoginComponent,\n    selectors: [[\"app-admin-login\"]],\n    viewQuery: function AdminLoginComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.AdminLoginFormDirective = _t.first);\n      }\n    },\n    decls: 15,\n    vars: 3,\n    consts: [[\"color\", \"primary\"], [1, \"container\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [\"lform\", \"ngForm\"], [\"matInput\", \"\", \"formControlName\", \"email\", \"placeholder\", \"Username\", \"type\", \"text\", \"required\", \"\"], [4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"Password\", \"type\", \"password\", \"formControlName\", \"password\", \"required\", \"\"], [\"type\", \"submit\", \"mat-button\", \"\", 1, \"background-primary\", \"text-floral-white\"]],\n    template: function AdminLoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-toolbar\", 0);\n        i0.ɵɵtext(1, \" Admin Login\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"form\", 2, 3);\n        i0.ɵɵlistener(\"ngSubmit\", function AdminLoginComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onLoginSubmit();\n        });\n        i0.ɵɵelementStart(5, \"p\");\n        i0.ɵɵelementStart(6, \"mat-form-field\");\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵtemplate(8, AdminLoginComponent_mat_error_8_Template, 2, 1, \"mat-error\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵelementStart(10, \"mat-form-field\");\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵtemplate(12, AdminLoginComponent_mat_error_12_Template, 2, 1, \"mat-error\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 7);\n        i0.ɵɵtext(14, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.AdminLoginForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.formErrors.username);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.formErrors.password);\n      }\n    },\n    directives: [i4.MatToolbar, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i5.MatFormField, i6.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i7.NgIf, i8.MatButton, i5.MatError],\n    styles: [\"\"]\n  });\n  return AdminLoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}